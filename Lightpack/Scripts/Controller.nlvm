import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.SceneObjectElement;
import com.nolimitscoaster.Script;
import com.nolimitscoaster.Button;
import com.nolimitscoaster.StaticSound;
import nlvm.math3d.Vector4f;
import nlvm.math3d.Vector3f;

public class Controller extends Script {
    private SceneObject sco;
    private SceneObjectElement cursor;
    private RayCast[]rays;
    private bool[]state;
    private bool pressed = false;
    private int doorState = 0;
    private float animTime = 0;
    private float time = 0;
    public static final String switchPrefix = "Switch";
    public static final float activeRange = 1.25f;
    public static final float switchRange = 0.025f;
    public static final String MSG_ERROR = "Error: ";
    public static final String MSG_WARNING = "Warning: ";
    public static final String MSG_NOTE = "Note: ";
    public static final Vector4f STATE_ON = new Vector4f(1.5253f, 0.2567f, 0.7532f, 1);
    public static final Vector4f STATE_OFF = new Vector4f(0.5253f, 0.2567f, 0.7532f, 1);
    private StaticSound sSwitch;
    protected String SCRIPT_NAME = "Default";
    protected SceneObjectElement[]SWITCH;
    protected String[]PREFIX;
    protected SceneObject[][]LIGHTOBJ;
    protected bool HASDOORANIM = false;
    protected Vector3f ON_POS;
    protected Vector3f OFF_POS;
    
    public bool onInit() {
        sco = sim.getSceneObjectForEntityId(getParentEntityId());
        if (sco == null) {
            System.err.println(MSG_ERROR + SCRIPT_NAME + " not attached to a scenery object");
            return false;
        }
        if (sco.getElementCount() < SWITCH.length) {
            System.err.println(MSG_ERROR + SCRIPT_NAME + " not sufficient amount of switch elements found");
            System.err.println("Switches needed : " + SWITCH.length + " , Switches found : " + sco.getElementCount());
            return false;
        }
        if (HASDOORANIM) {
            if (sco.getMaxKeyFrameAnimationTime() <= 0) {
                System.err.println(MSG_ERROR + SCRIPT_NAME + " object specified animation but no animation found");
                return false;
            }
            animTime = (float)sco.getMaxKeyFrameAnimationTime();
        }
        rays = new RayCast[SWITCH.length];
        state = new bool[SWITCH.length];
        for (int i = 0; i < SWITCH.length; i++) {
            if (sco.getStringParameter("prefix" + i) == null) {
                System.err.println(MSG_ERROR + SCRIPT_NAME + " missing prefix" + i + " parameter");
                return false;
            }
            PREFIX[i] = sco.getStringParameter("prefix" + i);
            SWITCH[i] = sco.getElementForName(switchPrefix + i);
            if (SWITCH[i] == null) {
                System.err.println(MSG_ERROR + SCRIPT_NAME + " cannot find switch" + i + " element in nl2sco");
                return false;
            }
            if (PREFIX[i] == "" || PREFIX[i].length() == 0) {
                System.out.println(MSG_NOTE + SCRIPT_NAME + " no prefix specified in group " + i + " skipping group");
            } else {
                if (sim.getSceneObjectsWithName(PREFIX[i] + ".light").length == 0) {
                    System.err.println(MSG_WARNING + SCRIPT_NAME + " prefix specified for group " + i + " but no scenery objects found with name '" + PREFIX[i] + ".light' in park");
                } else {
                    LIGHTOBJ[i] = sim.getSceneObjectsWithName(PREFIX[i] + ".light");
                    state[i] = sco.getBooleanParameter("state" + i).boolValue();
                    System.out.println(MSG_NOTE + SCRIPT_NAME + " found " + LIGHTOBJ[i].length + " lights for group " + i + " using prefix " + PREFIX[i] + " with start state " + state[i]);
                    rays[i] = new RayCast(SWITCH[i]);
                }
            }
        }
        ON_POS.set(rad(ON_POS.x), rad(ON_POS.y), rad(ON_POS.z));
        OFF_POS.set(rad(OFF_POS.x), rad(OFF_POS.y), rad(OFF_POS.z));
        if (sco.getElementForName("Cursor") == null) {
            System.err.println(MSG_ERROR + SCRIPT_NAME + " no cursor object found in model");
            return false;
        } else {
            cursor = sco.getElementForName("Cursor");
            cursor.setVisible(false);
        }
        sSwitch = StaticSound.loadFromResourceId("Switch", StaticSound.FLAG_MIXDOWN_MONO);
        sSwitch.setPosition(sco.getTranslation());
        sSwitch.setDistanceParameters(1.2f, 5.0f);
        sSwitch.setGain(0.7f);

        for(int ii = 0; ii < state.length; ii++){
            if(!state[ii]) continue;

            updateSwitch(ii);
            updateLights(ii);
        }

        System.out.println(MSG_NOTE + SCRIPT_NAME + " setup complete");
        return true;
    }
    public float rad(float f) {
        return (float)Math.toRadians(f);
    }
    private void updateLights(int group) {
        for (int i = 0; i < LIGHTOBJ[group].length; i++) {
            LIGHTOBJ[group][i].getElementForName("rfr").setEntityColor(0, state[group] ? STATE_ON : STATE_OFF);
        }
    }
    private void updateSwitch(int group) {
        SWITCH[group].setRotation(state[group] ? ON_POS : OFF_POS);
    }
    public void onNextFrame(float tick) {
        if (sim.isViewerInsideSphere(sco.getTranslation(), activeRange)) {
            cursor.setVisible(true);
            for (int i = 0; i < SWITCH.length; i++) {
                if (PREFIX[i].length() <= 0)
                    continue;
                if (rays[i].isViewerLookingAt(switchRange)) {
                    cursor.setMatrix(SWITCH[i].getMatrix());
                    if (Button.isPressed(Button.ACTION) && pressed == false) {
                        state[i] = !state[i];
                        updateLights(i);
                        updateSwitch(i);
                        sSwitch.play();
                        pressed = true;
                    }
                }
            }
            doorState = 1;
        } else {
            doorState = 0;
            cursor.setVisible(false);
        }
        switch (doorState) {
        case 0:
            time -= time < 0 ? 0 : tick;
            sco.setKeyFrameAnimationTime(time);
            break;
        case 1:
            time += time > animTime ? 0 : tick;
            sco.setKeyFrameAnimationTime(time);
            break;
        default: ;
        }
        if (!Button.isPressed(Button.ACTION)) {
            pressed = false;
        }
    }
}